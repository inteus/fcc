{"version":3,"sources":["components/App.module.css","components/OrderList.module.css","components/ItemList.module.css","actions/items.js","actions/order.js","components/OrderList.js","notifications/Error.js","notifications/Alert.js","preloader/Preloader.js","components/OrderListContainer.js","components/ItemList.js","components/ItemListContainer.js","components/App.js","reducers/items.js","reducers/order.js","reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["module","exports","getItems","items","type","fetchData","isFetching","setItems","dispatch","Axios","get","then","res","data","catch","error","catchError","addToOrder","itemName","itemId","itemPrice","sendToggle","isSending","showAlert","text","payload","setTimeout","clearCart","OrderList","props","className","st","order__list__item","name","count","Error","class","role","Alert","Preloader","style","margin","OrderListContainer","changeInputHandler","event","persist","setState","prev","target","value","sendOrder","preventDefault","createOrder","state","customer_name","customer_phone","myOrder","totalAmount","list","Object","keys","localStorage","map","key","listItem","JSON","parse","getItem","id","i","total","this","order","item","onSubmit","alert","order__container","order__list","length","order__list__total","order__detail","onChange","disabled","order__list__btn","onClick","order__made__total","order__made__total__header","Component","connect","phone","trim","post","customer_order","total_amount","response","console","log","Date","now","toString","setItem","stringify","catchCartError","ItemList","price","quantity","item__item","removeItem","ItemListContainer","itemsListWrapper","itemsTitleWrapper","item__title","App","appWrapper","initialState","itemsReducer","action","orderReducer","newList","alreadyInOrder","forEach","push","reducers","combineReducers","Boolean","window","location","hostname","match","store","createStore","compose","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.28933467.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3NVUO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"order__container\":\"OrderList_order__container__3FuZV\",\"order__list\":\"OrderList_order__list__1Vz1Z\",\"order__list__item\":\"OrderList_order__list__item__21tqG\",\"order__list__btn\":\"OrderList_order__list__btn__35oa1\",\"order__detail\":\"OrderList_order__detail__80GTi\",\"order__made__total\":\"OrderList_order__made__total__16_0d\",\"order__made__total__header\":\"OrderList_order__made__total__header__Ge91S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemsListWrapper\":\"ItemList_itemsListWrapper__31Uxl\",\"itemsTitleWrapper\":\"ItemList_itemsTitleWrapper__2cx9c\",\"item__title\":\"ItemList_item__title__CkLXp\",\"itemsWrapper\":\"ItemList_itemsWrapper__1Q7Bi\",\"item\":\"ItemList_item__lspKI\",\"item__item\":\"ItemList_item__item__1XXCw\"};","import Axios from 'axios';\r\n\r\nexport const GET_ITEMS = \"GET_ITEMS\";\r\nexport const FETCH_DATA = \"FETCH_DATA\";\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\r\nexport const RETURN_ITEM = \"RETURN_ITEM\";\r\nexport const CATCH_ERROR = \"CATCH_ERROR\";\r\n\r\nexport const getItems = (items) => ({\r\n    type: GET_ITEMS,\r\n    items\r\n});\r\n\r\nexport const fetchData = (isFetching) => ({\r\n    type: FETCH_DATA,\r\n    isFetching\r\n});\r\n\r\nexport const removeItem = (itemId) => ({\r\n    type: REMOVE_ITEM,\r\n    itemId\r\n})\r\n\r\nexport const returnItem = (itemId) => ({\r\n    type: RETURN_ITEM,\r\n    itemId\r\n})\r\n\r\nexport const catchError = (error) => ({\r\n    type: CATCH_ERROR,\r\n    error\r\n})\r\n\r\nexport const setItems = () => {\r\n    return (dispatch) => {\r\n        dispatch(fetchData(true));\r\n        Axios.get('https://5e2df3533b0d640014be10a0.mockapi.io/api/v1/items')\r\n            .then(res => {\r\n                dispatch(getItems(res.data));\r\n                dispatch(fetchData(false));\r\n            })\r\n            .catch((error) => {\r\n                dispatch(catchError(error));\r\n                dispatch(fetchData(false));\r\n            });\r\n    }\r\n}","import Axios from 'axios';\r\nimport { setItems } from './items';\r\n\r\nexport const ADD_TO_ORDER = \"ADD_TO_ORDER\";\r\nexport const SEND_ORDER_TOGGLE = \"SEND_ORDER_TOGGLE\";\r\nexport const REMOVE_CART_ITEMS = \"REMOVE_CART_ITEMS\";\r\nexport const CATCH_CART_ERROR = \"CATCH_CART_ERROR\";\r\nexport const SHOW_ALERT = \"SHOW_ALERT\";\r\nexport const HIDE_ALERT = \"HIDE_ALERT\";\r\n\r\nexport const addToOrder = (itemName, itemId, itemPrice) => ({\r\n  type: ADD_TO_ORDER,\r\n  itemName,\r\n  itemId,\r\n  itemPrice\r\n})\r\n\r\nexport const sendToggle = (isSending) => ({\r\n  type: SEND_ORDER_TOGGLE,\r\n  isSending\r\n})\r\n\r\nexport const removeItems = () => ({\r\n  type: REMOVE_CART_ITEMS\r\n})\r\n\r\nexport const catchCartError = (error) => ({\r\n  type: CATCH_CART_ERROR,\r\n  error\r\n})\r\n\r\nexport function showAlert(text) {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: text\r\n    })\r\n\r\n    setTimeout(() => {\r\n      dispatch(hideAlert())\r\n    }, 4000)\r\n  }\r\n}\r\n\r\nexport function hideAlert() {\r\n  return {\r\n    type: HIDE_ALERT\r\n  }\r\n}\r\n\r\nexport const createOrder = (name, phone, order, total) => {\r\n  return (dispatch) => {\r\n    if (!name.trim() || !phone.trim()) {\r\n      return dispatch(showAlert('You must fill out all the contact fields!'));\r\n    }\r\n    dispatch(sendToggle(true));\r\n    Axios.post('https://5e2df3533b0d640014be10a0.mockapi.io/api/v1/order', {\r\n      customer_name: name,\r\n      customer_phone: phone,\r\n      customer_order: order,\r\n      total_amount: total\r\n    })\r\n      .then((response) => {\r\n        console.log(response);\r\n        const order = {\r\n          id: response.data.id,\r\n          items: response.data.customer_order,\r\n          total: response.data.total_amount\r\n        };\r\n        const key = Date.now().toString()\r\n        localStorage.setItem(key, JSON.stringify(order));\r\n        dispatch(sendToggle(false));\r\n        dispatch(clearCart());\r\n        alert(`Заказ №${response.data.id} отправлен. Время создания: ${Date().toString()}!`);\r\n        dispatch(setItems());\r\n      })\r\n      .catch((error) => {\r\n        dispatch(catchCartError(error));\r\n      });\r\n  }\r\n}\r\n\r\nexport const clearCart = () => {\r\n  return (dispatch) => {\r\n    dispatch(removeItems());\r\n    dispatch(setItems());\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport st from './OrderList.module.css';\r\n\r\nconst OrderList = (props) => {\r\n    return (\r\n        <div className={st.order__list__item}>\r\n                <div>{props.name}</div>\r\n                <div>{props.count} pcs.</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderList;","import React from 'react';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div class=\"alert alert-danger\" role=\"alert\">Failed to load or send data.</div>\r\n    )\r\n}\r\n\r\nexport default Error;","import React from 'react'\r\n\r\nconst Alert = ({ text }) => (\r\n  <div className=\"alert alert-warning\" role=\"alert\">\r\n    {text}\r\n  </div>\r\n)\r\n\r\nexport default Alert;","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div class=\"d-flex justify-content-center\" style={{margin: \"50px\"}}>\r\n            <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addToOrder, createOrder, showAlert, clearCart } from '../actions/order';\r\nimport OrderList from './OrderList';\r\nimport Error from '../notifications/Error';\r\nimport Alert from '../notifications/Alert';\r\nimport Preloader from '../preloader/Preloader';\r\nimport st from './OrderList.module.css';\r\n\r\nclass OrderListContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            customer_name: '',\r\n            customer_phone: ''\r\n        }\r\n    }\r\n\r\n    changeInputHandler = event => {\r\n        event.persist();\r\n        this.setState(prev => ({\r\n            ...prev, ...{\r\n                [event.target.name]: event.target.value\r\n            }\r\n        }));\r\n    }\r\n\r\n    sendOrder = (event) => {\r\n        event.preventDefault();\r\n        this.props.createOrder(this.state.customer_name, this.state.customer_phone, this.props.myOrder, this.props.totalAmount)\r\n        this.setState({ customer_name: '', customer_phone: '' });\r\n    }\r\n\r\n    render() {\r\n\r\n        const list = Object.keys(localStorage).map(key => {\r\n            const listItem = JSON.parse(localStorage.getItem(key));\r\n\r\n            return (\r\n                <div className={key}>\r\n                    <p><u><i>Order №{listItem.id}</i></u></p>\r\n                    <p>{listItem.items.map(i => <div>{i.name}: {i.count} pcs.</div>)}</p>\r\n                    <p><i>Total :</i> <b>{listItem.total} $</b></p>\r\n                    <hr />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        const { myOrder, totalAmount, error, sendToggle } = this.props;\r\n        // let totalItems = myOrder.reduce((sum, item) => {\r\n        //     return sum += item.count;\r\n        // }, 0);\r\n\r\n        let order = myOrder.map(item => <OrderList {...item} key={item.id} />);\r\n\r\n        if (error) return <Error />\r\n        if (sendToggle) return <Preloader />\r\n\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.sendOrder}>\r\n                    {this.props.alert && <Alert text={this.props.alert} />}\r\n                    <div className={st.order__container}>\r\n                        <div className={st.order__list}>\r\n                            <div>\r\n                                {(!order.length) ? 'Your order list is empty!' : order}\r\n                            </div>\r\n                            <hr />\r\n                            <div className={st.order__list__total}>\r\n                                <i>Total :</i> <b>{totalAmount} $</b>\r\n                            </div>\r\n                            <div>\r\n                            </div>\r\n                        </div>\r\n                        {/* <div>{totalItems === 0 ? `Your order list is empty!` : `You have ${totalItems} items in your order`}</div> */}\r\n                        <div>\r\n                            <div className={st.order__detail}>Name: <input\r\n                                className=\"form-control\" type='text'\r\n                                id='customer_name'\r\n                                value={this.state.customer_name}\r\n                                name='customer_name'\r\n                                onChange={this.changeInputHandler} />\r\n                            </div>\r\n                            <div className={st.order__detail}>Phone: <input\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                id='customer_phone'\r\n                                value={this.state.customer_phone}\r\n                                name='customer_phone'\r\n                                onChange={this.changeInputHandler} />\r\n                            </div>\r\n                            <div className={st.order__detail}>\r\n                                <button className=\"btn btn-success\" disabled={(order.length) ? '' : 'disabled'} type='submit' >Create order</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <div className={st.order__list__btn}>\r\n                    <button className=\"btn btn-primary\"\r\n                        onClick={this.props.clearCart} disabled={myOrder.length ? '' : 'disabled'}>Clear cart</button>\r\n                </div>\r\n                <div className={st.order__made__total}>\r\n                    <div className={st.order__made__total__header}><b>List of orders you made:</b></div>\r\n                    <div className={st.order__made__total__header}>{Object.keys(list).length === 0 ? 'No orders yet!' : list}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    const { myOrder, totalAmount, error, alert, sendToggle } = state.order;\r\n    return {\r\n        myOrder,\r\n        totalAmount,\r\n        error,\r\n        sendToggle,\r\n        alert\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        addToOrder,\r\n        createOrder,\r\n        showAlert,\r\n        clearCart\r\n    })(OrderListContainer);\r\n","import React from 'react';\r\nimport st from './ItemList.module.css';\r\n\r\nconst ItemList = (props) => {\r\n\r\n    const { name, price, quantity, id } = props;\r\n\r\n    return (\r\n        <div className={st.item}>\r\n            <div className={st.item__item}>\r\n                {name}\r\n            </div>\r\n            <div className={st.item__item}>\r\n                {price} $\r\n                </div>\r\n            <div className={st.item__item}>\r\n                {quantity} pcs.\r\n                </div>\r\n            <div className={st.item__item}><button className=\"btn btn-secondary\" onClick={() => {\r\n                props.removeItem(id);\r\n                props.addToOrder(name, id, price);\r\n            }\r\n            } disabled={props.quantity > 0 ? '' : 'disabled'}>Add</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemList;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData, getItems, removeItem, setItems } from '../actions/items';\r\nimport { addToOrder } from '../actions/order';\r\nimport ItemList from './ItemList';\r\nimport Preloader from '../preloader/Preloader';\r\nimport Error from '../notifications/Error';\r\nimport st from './ItemList.module.css';\r\n\r\nclass ItemListContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.setItems(this.items);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { items, isFetching, error, removeItem, addToOrder } = this.props;\r\n\r\n        let item = items.map(item => <ItemList\r\n            {...item}\r\n            key={item.id}\r\n            removeItem={removeItem}\r\n            addToOrder={addToOrder} />);\r\n\r\n        if (isFetching) return <Preloader />\r\n        if (error) return <Error />\r\n\r\n        return (\r\n            <div className={st.itemsListWrapper}>\r\n                <div className={st.itemsTitleWrapper}>\r\n                    <div className={st.item__title}>Title</div>\r\n                    <div className={st.item__title}>Cost</div>\r\n                    <div className={st.item__title}>Qty</div>\r\n                    <div className={st.item__title}>Add to cart</div>\r\n                </div>\r\n                <div>\r\n                    {item}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStatetoProps = (state) => {\r\n    const { items, isFetching, error } = state.items;\r\n    return {\r\n        items,\r\n        isFetching,\r\n        error\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps,\r\n    {\r\n        getItems,\r\n        removeItem,\r\n        fetchData,\r\n        addToOrder,\r\n        setItems\r\n    })(ItemListContainer);","import React from 'react';\r\nimport OrderListContainer from './OrderListContainer';\r\nimport ItemListContainer from './ItemListContainer';\r\nimport st from './App.module.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className={st.appWrapper}>\r\n            <div><ItemListContainer /></div>\r\n            <div><OrderListContainer /></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import * as actions from '../actions/items';\r\n\r\nlet initialState = {\r\n    items: [],\r\n    isFetching: true,\r\n    error: null\r\n}\r\n\r\nconst itemsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case actions.GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.items\r\n            }\r\n\r\n        case actions.FETCH_DATA:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n\r\n        case actions.REMOVE_ITEM:\r\n\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => (item.id === action.itemId) ? { ...item, quantity: item.quantity - 1 } : item)\r\n            }\r\n\r\n        case actions.RETURN_ITEM:\r\n\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => (item.id === action.itemId) ? { ...item, quantity: item.quantity + 1 } : item)\r\n            }\r\n\r\n        case actions.CATCH_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default itemsReducer;","import * as actions from '../actions/order';\r\n\r\nlet initialState = {\r\n    myOrder: [],\r\n    totalAmount: 0,\r\n    sendToggle: false,\r\n    error: null,\r\n    alert: null\r\n}\r\n\r\nconst orderReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case actions.ADD_TO_ORDER:\r\n\r\n            const newList = state.myOrder;\r\n\r\n            let alreadyInOrder = false;\r\n\r\n            newList.forEach(item => {\r\n                if (item.id === action.itemId) {\r\n                    item.count += 1;\r\n                    alreadyInOrder = true;\r\n                }\r\n            });\r\n\r\n            if (!alreadyInOrder) {\r\n                newList.push(\r\n                    {\r\n                        name: action.itemName,\r\n                        id: action.itemId,\r\n                        price: action.itemPrice,\r\n                        count: 1\r\n                    })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                myOrder: newList,\r\n                totalAmount: state.totalAmount + action.itemPrice\r\n            }\r\n\r\n        case actions.REMOVE_CART_ITEMS:\r\n            return {\r\n                ...state,\r\n                myOrder: [],\r\n                totalAmount: 0\r\n            }\r\n\r\n        case actions.SEND_ORDER_TOGGLE:\r\n            return {\r\n                ...state,\r\n                sendToggle: action.isSending\r\n            }\r\n\r\n        case actions.CATCH_CART_ERROR:\r\n                return {\r\n                    ...state,\r\n                    error: action.error\r\n                }\r\n\r\n        case actions.SHOW_ALERT:\r\n                    return {\r\n                        ...state, \r\n                        alert: action.payload}\r\n                    \r\n        case actions.HIDE_ALERT:\r\n                    return {\r\n                        ...state, \r\n                        alert: null}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default orderReducer;","import { combineReducers } from 'redux';\r\nimport itemsReducer from '../reducers/items';\r\nimport orderReducer from '../reducers/order';\r\n\r\nconst reducers = combineReducers({\r\n    items: itemsReducer,\r\n    order: orderReducer\r\n});\r\n\r\nexport default reducers;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport reducers from './reducers/rootReducer'\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducers,\n  compose(\n      applyMiddleware(thunkMiddleware),\n      //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}