{"version":3,"sources":["components/ItemList.module.css","components/OrderList.module.css","components/App.module.css","actions/items.js","actions/order.js","components/OrderList.js","notifications/Error.js","preloader/Preloader.js","components/OrderListContainer.js","components/ItemList.js","components/ItemListContainer.js","components/App.js","reducers/items.js","reducers/order.js","reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["module","exports","getItems","items","type","fetchData","isFetching","setItems","dispatch","Axios","get","then","res","data","catch","error","catchError","addToOrder","itemName","itemId","itemPrice","sendToggle","isSending","OrderList","props","className","styles","orderWrapper","orderName","name","orderQty","count","Error","style","color","margin","fontSize","Preloader","OrderListContainer","changeInputHandler","event","persist","setState","prev","target","value","sendOrder","preventDefault","createOrder","state","customer_name","customer_phone","myOrder","totalAmount","this","totalItems","reduce","sum","item","order","map","key","id","onSubmit","itemTotalBlock","onChange","htmlFor","pattern","disabled","Component","connect","phone","total","post","Date","now","toString","customer_order","total_amount","response","console","log","alert","catchCartError","ItemList","price","quantity","ItemContainer","itemQty","width","height","minWidth","onClick","removeItem","ItemListContainer","itemsWrapper","App","appWrapper","itemWrapper","initialState","itemsReducer","action","newList","orderReducer","alreadyInOrder","forEach","push","reducers","combineReducers","Boolean","window","location","hostname","match","store","createStore","compose","applyMiddleware","thunkMiddleware","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0a824390.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemsWrapper\":\"ItemList_itemsWrapper__1Q7Bi\",\"ItemContainer\":\"ItemList_ItemContainer__1OsKp\",\"itemName\":\"ItemList_itemName__4fcQW\",\"itemPrice\":\"ItemList_itemPrice__1Sbmj\",\"itemQty\":\"ItemList_itemQty__M6Cpa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemTotalBlock\":\"OrderList_itemTotalBlock__27Zeh\",\"orderWrapper\":\"OrderList_orderWrapper__1bidv\",\"orderName\":\"OrderList_orderName__2P5bz\",\"orderQty\":\"OrderList_orderQty__Zh1fv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3NVUO\"};","import Axios from 'axios';\r\n\r\nexport const GET_ITEMS = \"GET_ITEMS\";\r\nexport const FETCH_DATA = \"FETCH_DATA\";\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\r\nexport const CATCH_ERROR = \"CATCH_ERROR\";\r\n\r\nexport const getItems = (items) => ({\r\n    type: GET_ITEMS,\r\n    items\r\n});\r\n\r\nexport const fetchData = (isFetching) => ({\r\n    type: FETCH_DATA,\r\n    isFetching\r\n});\r\n\r\nexport const removeItem = (itemId) => ({\r\n    type: REMOVE_ITEM,\r\n    itemId\r\n})\r\n\r\nexport const catchError = (error) => ({\r\n    type: CATCH_ERROR,\r\n    error\r\n})\r\n\r\nexport const setItems = () => {\r\n    return (dispatch) => {\r\n        dispatch(fetchData(true));\r\n        Axios.get('http://localhost:3001/items')\r\n            .then(res => {\r\n                dispatch(getItems(res.data));\r\n                dispatch(fetchData(false));\r\n            })\r\n            .catch((error) => {\r\n                dispatch(catchError(error));\r\n                dispatch(fetchData(false));\r\n            });\r\n    }\r\n}","import Axios from 'axios';\r\nimport { setItems } from './items';\r\n\r\nexport const ADD_TO_ORDER = \"ADD_TO_ORDER\";\r\nexport const SEND_ORDER_TOGGLE = \"SEND_ORDER_TOGGLE\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const CATCH_CART_ERROR = \"CATCH_CART_ERROR\";\r\n\r\nexport const addToOrder = (itemName, itemId, itemPrice) => ({\r\n    type: ADD_TO_ORDER,\r\n    itemName,\r\n    itemId,\r\n    itemPrice\r\n})\r\n\r\nexport const sendToggle = (isSending) => ({\r\n    type: SEND_ORDER_TOGGLE,\r\n    isSending\r\n})\r\nexport const clearCart = () => ({\r\n    type: CLEAR_CART\r\n})\r\nexport const catchCartError = (error) => ({\r\n    type: CATCH_CART_ERROR,\r\n    error\r\n})\r\n\r\nexport const createOrder = (name, phone, order, total) => {\r\n    return (dispatch) => {\r\n        dispatch(sendToggle(true));\r\n        Axios.post('http://localhost:3001/order', {\r\n            id: Date.now().toString(),\r\n            customer_name: name,\r\n            customer_phone: phone,\r\n            customer_order: order,\r\n            total_amount: total\r\n        })\r\n            .then((response) => {\r\n                console.log(response);\r\n                dispatch(sendToggle(false));\r\n                dispatch(clearCart());\r\n                alert('Заказ отправлен!');\r\n                dispatch(setItems());\r\n            })\r\n            .catch((error) => {\r\n                dispatch(catchCartError(error));\r\n            });\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from './OrderList.module.css';\r\n\r\n\r\nconst OrderList = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={styles.orderWrapper} >\r\n                <div className={styles.orderName} >\r\n                    <li>{props.name}</li>\r\n                </div>\r\n                <div className={styles.orderQty}>\r\n                    {props.count} pcs.\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderList;","import React from 'react';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div style={{color: \"red\", margin: \"25px\", fontSize: \"25px\" }}>Failed to load or send data.</div>\r\n    )\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active\" style={{margin: \"50px\"}}></div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addToOrder, createOrder } from '../actions/order';\r\nimport OrderList from './OrderList';\r\nimport Error from '../notifications/Error';\r\nimport Preloader from '../preloader/Preloader';\r\nimport styles from './OrderList.module.css';\r\n\r\nclass OrderListContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            customer_name: '',\r\n            customer_phone: ''\r\n        }\r\n    }\r\n\r\n    changeInputHandler = event => {\r\n        event.persist();\r\n        this.setState(prev => ({\r\n            ...prev, ...{\r\n                [event.target.name]: event.target.value\r\n            }\r\n        }));\r\n    }\r\n\r\n    sendOrder = (event) => {\r\n        event.preventDefault();\r\n        this.props.createOrder(this.state.customer_name, this.state.customer_phone, this.props.myOrder, this.props.totalAmount)\r\n        this.setState({ customer_name: '', customer_phone: '' });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { myOrder, totalAmount, error, sendToggle } = this.props;\r\n        let totalItems = myOrder.reduce((sum, item) => {\r\n            return sum += item.count;\r\n        }, 0);\r\n\r\n        let order = myOrder.map(item => <OrderList {...item} key={item.id} />);\r\n\r\n        if (error) return <Error />\r\n        if (sendToggle) return <Preloader />\r\n\r\n        return (\r\n            <div>\r\n                <div>Order list:</div>\r\n                <form onSubmit={this.sendOrder} >\r\n                    <div>\r\n                        {order}\r\n                    </div>\r\n                    <div className={styles.itemTotalBlock}>\r\n                        {totalItems === 0 ? `Your order list is empty!` : `You have ${totalItems} items in your order`}\r\n                    </div>\r\n                    <hr />\r\n                    <div>\r\n                        Total: {totalAmount}$\r\n                    </div>\r\n                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\"><input\r\n                        className=\"mdl-textfield__input\" type='text'\r\n                        id='customer_name'\r\n                        value={this.state.customer_name}\r\n                        name='customer_name'\r\n                        onChange={this.changeInputHandler} />\r\n                        <label className=\"mdl-textfield__label\" htmlFor=\"customer_name\">Enter your name...</label>\r\n                    </div>\r\n                    <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\"><input\r\n                        className=\"mdl-textfield__input\" type=\"text\" pattern=\"-?[0-9]*(\\.[0-9]+)?\"\r\n                        id='customer_phone'\r\n                        value={this.state.customer_phone}\r\n                        name='customer_phone'\r\n                        onChange={this.changeInputHandler} />\r\n                        <label className=\"mdl-textfield__label\" htmlFor=\"customer_phone\">Enter your number...</label>\r\n                        <span className=\"mdl-textfield__error\">Input is not a number!</span>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect\"\r\n                            disabled={totalItems > 0 ? '' : 'disabled'}\r\n                            type='submit'>Create order</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    const { myOrder, totalAmount, error, sendToggle } = state.order;\r\n    return {\r\n        myOrder,\r\n        totalAmount,\r\n        error,\r\n        sendToggle\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        addToOrder,\r\n        createOrder\r\n    })(OrderListContainer);\r\n","import React from 'react';\r\nimport styles from './ItemList.module.css'\r\n\r\nconst ItemList = (props) => {\r\n\r\n    const { name, price, quantity, id } = props;\r\n\r\n    return (\r\n        <div className={styles.ItemContainer}>\r\n            <div className={styles.itemName}><li>{name}</li></div>\r\n            <div className={styles.itemPrice}>{price}$</div>\r\n            <div className={styles.itemQty}>{quantity} pcs.</div>\r\n            <div >\r\n                <button className=\"mdl-button mdl-js-button mdl-button--fab\"\r\n                style={{width: \"30px\", height: \"30px\", minWidth: \"initial\"}}\r\n                    onClick={() => {\r\n                        props.removeItem(id);\r\n                        props.addToOrder(name, id, price);\r\n                    }\r\n                    }\r\n                    disabled={props.quantity > 0 ? '' : 'disabled'}><i className=\"material-icons\">add</i></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemList;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData, getItems, removeItem, setItems } from '../actions/items';\r\nimport { addToOrder } from '../actions/order';\r\nimport ItemList from './ItemList';\r\nimport Preloader from '../preloader/Preloader';\r\nimport Error from '../notifications/Error';\r\nimport styles from './ItemList.module.css'\r\n\r\nclass ItemListContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.setItems(this.items);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { items, isFetching, error, removeItem, addToOrder } = this.props;\r\n        let item = items.map(item => <ItemList {...item} key={item.id} removeItem={removeItem} addToOrder={addToOrder} />);\r\n\r\n        if (isFetching) return <Preloader />\r\n        if (error) return <Error />\r\n\r\n        return (\r\n            <div className={styles.itemsWrapper}>\r\n                {item}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nlet mapStatetoProps = (state) => {\r\n    const { items, isFetching, error } = state.items;\r\n    return {\r\n        items,\r\n        isFetching,\r\n        error\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps,\r\n    {\r\n        getItems,\r\n        removeItem,\r\n        fetchData,\r\n        addToOrder,\r\n        setItems\r\n    })(ItemListContainer);","import React from 'react';\r\nimport OrderListContainer from './OrderListContainer';\r\nimport ItemListContainer from './ItemListContainer';\r\nimport styles from './App.module.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className={styles.appWrapper}>\r\n            <div className={styles.itemWrapper} >\r\n                <ItemListContainer />\r\n            </div>\r\n            <div className={styles.orderWrapper}>\r\n                <OrderListContainer />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import * as actions from '../actions/items';\r\n\r\nlet initialState = {\r\n    items: [],\r\n    isFetching: true,\r\n    error: null\r\n}\r\n\r\nconst itemsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case actions.GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.items\r\n            }\r\n\r\n        case actions.FETCH_DATA:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n\r\n        case actions.REMOVE_ITEM:\r\n\r\n            const newList = state.items.map(item => (item.id === action.itemId) ? { ...item, quantity: item.quantity - 1 } : item);\r\n\r\n            return {\r\n                ...state,\r\n                items: newList\r\n            }\r\n\r\n        case actions.CATCH_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default itemsReducer;","import * as actions from '../actions/order';\r\n\r\nlet initialState = {\r\n    myOrder: [],\r\n    totalAmount: 0,\r\n    sendToggle: false,\r\n    error: null\r\n}\r\n\r\nconst orderReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case actions.ADD_TO_ORDER:\r\n\r\n            const newList = state.myOrder;\r\n\r\n            let alreadyInOrder = false;\r\n\r\n            newList.forEach(item => {\r\n                if (item.id === action.itemId) {\r\n                    item.count += 1;\r\n                    alreadyInOrder = true;\r\n                }\r\n            });\r\n\r\n            if (!alreadyInOrder) {\r\n                newList.push(\r\n                    {\r\n                        name: action.itemName,\r\n                        id: action.itemId,\r\n                        price: action.itemPrice,\r\n                        count: 1\r\n                    })\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                myOrder: newList,\r\n                totalAmount: state.totalAmount + action.itemPrice\r\n            }\r\n\r\n        case actions.CLEAR_CART:\r\n            return {\r\n                ...state,\r\n                myOrder: [],\r\n                totalAmount: 0\r\n            }\r\n\r\n        case actions.SEND_ORDER_TOGGLE:\r\n            return {\r\n                ...state,\r\n                sendToggle: action.isSending\r\n            }\r\n\r\n            case actions.CATCH_CART_ERROR:\r\n                return {\r\n                    ...state,\r\n                    error: action.error\r\n                }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default orderReducer;","import { combineReducers } from 'redux';\r\nimport itemsReducer from '../reducers/items';\r\nimport orderReducer from '../reducers/order';\r\n\r\nconst reducers = combineReducers({\r\n    items: itemsReducer,\r\n    order: orderReducer\r\n});\r\n\r\nexport default reducers;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport OrderListContainer from './components/OrderListContainer';\nimport ItemListContainer from './components/ItemListContainer';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport reducers from './reducers/rootReducer'\nimport { Provider } from 'react-redux';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/material-design-lite/material.min.css';\nimport '../node_modules/material-design-lite/material.min';\n\nconst store = createStore(\n  reducers,\n  compose(\n      applyMiddleware(thunkMiddleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App/>\n        <Route exact path='/store' render={() => <ItemListContainer/>} />\n        <Route exact path='/order' render={() => <OrderListContainer />} />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}